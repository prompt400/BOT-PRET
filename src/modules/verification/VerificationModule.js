import { Events } from 'discord.js';
import WelcomeFlow from './welcomeFlow.js';
import PlayfulPersonality from './personalities/PlayfulPersonality.js';

class VerificationModule {
    constructor(client) {
        this.client = client;
        this.welcomeFlow = new WelcomeFlow();
        this.isEnabled = true;
        this.welcomeChannelId = null; // √Ä configurer
        this.verifiedRoleId = null; // √Ä configurer
        
        // Personnalit√© par d√©faut
        this.currentPersonality = new PlayfulPersonality();
        
        console.log('‚úÖ Module de v√©rification initialis√©');
    }
    
    /**
     * Initialise les √©v√©nements du module
     */
    initialize() {
        // √âv√©nement quand un membre rejoint le serveur
        this.client.on(Events.GuildMemberAdd, async (member) => {
            if (!this.isEnabled) return;
            
            console.log(`üÜï Nouveau membre: ${member.user.tag}`);
            
            try {
                // D√©marrage du flux de bienvenue en DM
                await this.welcomeFlow.startFlow(member, null);
                
            } catch (error) {
                console.error('‚ùå Erreur lors de l\'accueil du membre:', error);
            }
        });
        
        // √âv√©nement pour les interactions (boutons, menus, etc.)
        this.client.on(Events.InteractionCreate, async (interaction) => {
            if (!interaction.isButton() && !interaction.isSelectMenu()) return;
            
            // Traitement des interactions du flux de bienvenue
            if (interaction.customId.startsWith('welcome_')) {
                await this.handleWelcomeInteraction(interaction);
            }
        });
        
        console.log('üé≠ √âv√©nements du module de v√©rification configur√©s');
    }
    
    /**
     * G√®re les interactions du flux de bienvenue
     */
    async handleWelcomeInteraction(interaction) {
        const member = interaction.member;
        
        try {
            await this.welcomeFlow.processStep(member, interaction);
        } catch (error) {
            console.error('‚ùå Erreur dans l\'interaction:', error);
            await interaction.reply({
                content: 'üòî Une erreur s\'est produite. R√©essaye plus tard...',
                ephemeral: true
            });
        }
    }
    
    /**
     * Configure le module avec les IDs n√©cessaires
     */
    configure(config) {
        this.welcomeChannelId = config.welcomeChannelId;
        this.verifiedRoleId = config.verifiedRoleId;
        console.log('‚öôÔ∏è Configuration du module mise √† jour');
    }
    
    /**
     * Active ou d√©sactive le module
     */
    toggle(enabled) {
        this.isEnabled = enabled;
        console.log(`üîÑ Module de v√©rification: ${enabled ? 'activ√©' : 'd√©sactiv√©'}`);
    }
    
    /**
     * Obtient les statistiques du module
     */
    getStats() {
        return {
            enabled: this.isEnabled,
            activeFlows: this.welcomeFlow.userStates.size,
            totalSteps: this.welcomeFlow.steps.length
        };
    }

    /**
     * V√©rifie si un membre est d√©j√† v√©rifi√©
     */
    static isVerified(member) {
        return member.roles.cache.some(role => role.name === 'V√©rifi√©');
    }

    /**
     * D√©marre manuellement la v√©rification pour un membre
     */
    static async startVerification(member) {
        const module = member.client.verificationModule;
        if (!module) {
            throw new Error('Module de v√©rification non initialis√©');
        }
        
        // D√©marrage du flux en DM
        await module.welcomeFlow.startFlow(member, null);
    }

    /**
     * R√©cup√®re les donn√©es de v√©rification d'un utilisateur
     */
    async getUserVerificationData(member) {
        const userState = this.welcomeFlow.userStates.get(member.id);
        const isVerified = member.roles.cache.some(role => role.name === 'V√©rifi√©');
        
        const steps = this.welcomeFlow.steps.map(step => ({
            name: step.name,
            completed: userState?.completedSteps?.includes(step.name) || false
        }));
        
        const assignedRole = member.roles.cache.find(role => 
            ['Soft', 'Playful', 'Dominant'].includes(role.name)
        )?.name;
        
        return {
            isVerified,
            startDate: userState?.startDate || null,
            completedSteps: userState?.completedSteps?.length || 0,
            steps,
            assignedRole
        };
    }

    /**
     * Change la personnalit√© du bot
     */
    async setPersonality(personalityType) {
        const personalities = {
            'soft': 'SoftPersonality',
            'playful': 'PlayfulPersonality',
            'dominant': 'DominantPersonality'
        };
        
        const modulePath = `./personalities/${personalities[personalityType]}.js`;
        const { default: PersonalityClass } = await import(modulePath);
        this.currentPersonality = new PersonalityClass();
        console.log(`üé≠ Personnalit√© chang√©e en: ${personalityType}`);
    }

    /**
     * R√©initialise la v√©rification d'un membre
     */
    async resetUserVerification(member) {
        // Supprimer l'√©tat de l'utilisateur
        this.welcomeFlow.userStates.delete(member.id);
        
        // Supprimer le r√¥le V√©rifi√©
        const verifiedRole = member.guild.roles.cache.find(r => r.name === 'V√©rifi√©');
        if (verifiedRole && member.roles.cache.has(verifiedRole.id)) {
            await member.roles.remove(verifiedRole);
        }
        
        console.log(`üîÑ V√©rification r√©initialis√©e pour ${member.user.tag}`);
    }

    /**
     * Active l'√©coute de l'√©v√©nement guildMemberAdd
     */
    activateGuildMemberAdd() {
        this.isEnabled = true;
        console.log('‚úÖ Module de v√©rification activ√© pour les nouveaux membres');
    }
}

export default VerificationModule;
