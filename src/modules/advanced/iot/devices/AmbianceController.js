/**
 * AmbianceController - Contr√¥leur d'ambiance immersive via Discord
 */
class AmbianceController {
    constructor(deviceId, deviceName, ownerId) {
        this.deviceId = deviceId;
        this.deviceName = deviceName;
        this.ownerId = ownerId;
        this.type = 'ambiance';
        this.active = false;
        this.controllers = new Set([ownerId]);
        this.lastActivity = Date.now();
        
        // √âtat de l'ambiance
        this.ambiance = {
            theme: 'romantic',
            temperature: 'ti√®de',
            lighting: { color: '#FF69B4', intensity: 50, effect: 'statique' },
            sound: { type: 'vagues', volume: 30 },
            scent: 'roses'
        };
        
        // Th√®mes pr√©d√©finis
        this.themes = {
            romantic: {
                name: 'Romantique',
                emoji: 'üåπ',
                temperature: 'ti√®de',
                lighting: { color: '#FF69B4', intensity: 30, effect: 'bougie' },
                sound: { type: 'jazz doux', volume: 25 },
                scent: 'roses'
            },
            passionate: {
                name: 'Passionn√©',
                emoji: 'üî•',
                temperature: 'chaud',
                lighting: { color: '#FF0000', intensity: 70, effect: 'pulsation' },
                sound: { type: 'battements de c≈ìur', volume: 40 },
                scent: 'musc'
            },
            relaxing: {
                name: 'Relaxant',
                emoji: 'üåä',
                temperature: 'frais',
                lighting: { color: '#00CED1', intensity: 20, effect: 'vague' },
                sound: { type: 'vagues oc√©an', volume: 35 },
                scent: 'lavande'
            },
            exotic: {
                name: 'Exotique',
                emoji: 'üå∫',
                temperature: 'tropical',
                lighting: { color: '#FFD700', intensity: 60, effect: 'scintillement' },
                sound: { type: 'for√™t tropicale', volume: 30 },
                scent: 'vanille coco'
            },
            mystical: {
                name: 'Mystique',
                emoji: '‚ú®',
                temperature: 'myst√©rieux',
                lighting: { color: '#9400D3', intensity: 40, effect: 'aurore' },
                sound: { type: 'carillons √©oliens', volume: 20 },
                scent: 'encens'
            }
        };
    }

    /**
     * Active le contr√¥leur d'ambiance
     */
    activate() {
        this.active = true;
        this.lastActivity = Date.now();
        console.log(`‚ú® ${this.deviceName} activ√©.`);
    }

    /**
     * D√©sactive le contr√¥leur
     */
    deactivate() {
        this.active = false;
        this.lastActivity = Date.now();
        console.log(`üîå ${this.deviceName} d√©sactiv√©.`);
    }

    /**
     * D√©finit un th√®me d'ambiance
     * @param {string} themeName - Nom du th√®me
     */
    async setTheme(themeName) {
        if (!this.themes[themeName]) {
            throw new Error(`Th√®me inconnu : ${themeName}`);
        }
        
        const theme = this.themes[themeName];
        this.ambiance = { ...theme, theme: themeName };
        this.lastActivity = Date.now();
        
        return {
            success: true,
            theme: theme.name,
            emoji: theme.emoji,
            message: `${theme.emoji} Ambiance ${theme.name} activ√©e !`
        };
    }

    /**
     * Ex√©cute une commande
     * @param {string} command - Commande √† ex√©cuter
     * @param {Object} params - Param√®tres
     * @returns {Object} R√©sultat
     */
    async executeCommand(command, params = {}) {
        this.lastActivity = Date.now();
        
        switch(command) {
            case 'activate':
                this.activate();
                return { 
                    success: true, 
                    message: `‚ú® ${this.deviceName} activ√© !`,
                    status: this.getDetailedStatus()
                };
                
            case 'deactivate':
                this.deactivate();
                return { 
                    success: true, 
                    message: `üîå ${this.deviceName} d√©sactiv√©.`
                };
                
            case 'setTheme':
                return await this.setTheme(params.theme);
                
            case 'adjustLighting':
                return this.adjustLighting(params);
                
            case 'adjustSound':
                return this.adjustSound(params);
                
            case 'adjustTemperature':
                return this.adjustTemperature(params.level);
                
            case 'randomize':
                return this.randomizeAmbiance();
                
            default:
                return { success: false, message: `Commande inconnue : ${command}` };
        }
    }

    /**
     * Ajuste l'√©clairage
     * @param {Object} params - Param√®tres d'√©clairage
     * @returns {Object} R√©sultat
     */
    adjustLighting(params) {
        if (params.color) this.ambiance.lighting.color = params.color;
        if (params.intensity) this.ambiance.lighting.intensity = Math.max(0, Math.min(100, params.intensity));
        if (params.effect) this.ambiance.lighting.effect = params.effect;
        
        return {
            success: true,
            message: `üí° √âclairage ajust√© : ${this.ambiance.lighting.effect} ${this.ambiance.lighting.intensity}%`,
            lighting: this.ambiance.lighting
        };
    }

    /**
     * Ajuste le son
     * @param {Object} params - Param√®tres sonores
     * @returns {Object} R√©sultat
     */
    adjustSound(params) {
        if (params.type) this.ambiance.sound.type = params.type;
        if (params.volume) this.ambiance.sound.volume = Math.max(0, Math.min(100, params.volume));
        
        const soundEmojis = {
            'jazz doux': 'üé∑',
            'vagues oc√©an': 'üåä',
            'battements de c≈ìur': 'üíì',
            'for√™t tropicale': 'üå¥',
            'carillons √©oliens': 'üéê'
        };
        
        const emoji = soundEmojis[this.ambiance.sound.type] || 'üéµ';
        
        return {
            success: true,
            message: `${emoji} Son : ${this.ambiance.sound.type} √† ${this.ambiance.sound.volume}%`,
            sound: this.ambiance.sound
        };
    }

    /**
     * Ajuste la temp√©rature
     * @param {string} level - Niveau de temp√©rature
     * @returns {Object} R√©sultat
     */
    adjustTemperature(level) {
        const temps = {
            'glacial': { emoji: 'üßä', desc: 'Frissons garantis' },
            'frais': { emoji: '‚ùÑÔ∏è', desc: 'Agr√©ablement frais' },
            'ti√®de': { emoji: '‚òÄÔ∏è', desc: 'Confortablement ti√®de' },
            'chaud': { emoji: 'üî•', desc: 'Chaleur sensuelle' },
            'tropical': { emoji: 'üå¥', desc: 'Chaleur tropicale' },
            'myst√©rieux': { emoji: 'üå´Ô∏è', desc: 'Temp√©rature √©nigmatique' }
        };
        
        if (!temps[level]) {
            return { success: false, message: 'Niveau de temp√©rature inconnu' };
        }
        
        this.ambiance.temperature = level;
        const temp = temps[level];
        
        return {
            success: true,
            message: `${temp.emoji} Temp√©rature ${level} - ${temp.desc}`,
            temperature: level
        };
    }

    /**
     * Randomise l'ambiance
     * @returns {Object} R√©sultat
     */
    randomizeAmbiance() {
        const themeNames = Object.keys(this.themes);
        const randomTheme = themeNames[Math.floor(Math.random() * themeNames.length)];
        this.setTheme(randomTheme);
        
        return {
            success: true,
            message: `üé≤ Ambiance al√©atoire : ${this.themes[randomTheme].emoji} ${this.themes[randomTheme].name} !`,
            theme: randomTheme
        };
    }

    /**
     * V√©rifie les permissions
     * @param {string} userId - ID utilisateur
     * @returns {boolean} Autoris√© ou non
     */
    canControl(userId) {
        return this.controllers.has(userId);
    }

    /**
     * Ajoute un contr√¥leur
     * @param {string} userId - ID utilisateur
     */
    addController(userId) {
        this.controllers.add(userId);
    }

    /**
     * Obtient le statut
     * @returns {Object} Statut actuel
     */
    getStatus() {
        return {
            id: this.deviceId,
            name: this.deviceName,
            type: this.type,
            active: this.active,
            ambiance: this.ambiance,
            lastActivity: this.lastActivity
        };
    }

    /**
     * Obtient une description d√©taill√©e
     * @returns {string} Description format√©e
     */
    getDetailedStatus() {
        const theme = this.themes[this.ambiance.theme] || {};
        let status = `**${this.deviceName}** ${this.active ? '‚ú®' : 'üîå'}\n`;
        status += `${theme.emoji || 'üé≠'} Th√®me : ${theme.name || 'Personnalis√©'}\n\n`;
        
        status += `üí° **√âclairage**\n`;
        status += `Couleur : ${this.ambiance.lighting.color}\n`;
        status += `Intensit√© : ${this.ambiance.lighting.intensity}%\n`;
        status += `Effet : ${this.ambiance.lighting.effect}\n\n`;
        
        status += `üéµ **Son**\n`;
        status += `Type : ${this.ambiance.sound.type}\n`;
        status += `Volume : ${this.ambiance.sound.volume}%\n\n`;
        
        status += `üå°Ô∏è **Temp√©rature** : ${this.ambiance.temperature}\n`;
        status += `üå∏ **Parfum** : ${this.ambiance.scent}\n`;
        
        return status;
    }

    /**
     * V√©rifie si actif
     * @returns {boolean} √âtat actif
     */
    isActive() {
        return this.active;
    }

    /**
     * D√©finit comme ma√Ætre de sync
     * @param {string} groupId - ID du groupe
     */
    setAsMaster(groupId) {
        this.syncGroup = groupId;
        console.log(`${this.deviceName} est le ma√Ætre d'ambiance !`);
    }

    /**
     * Synchronise avec un autre contr√¥leur
     * @param {AmbianceController} masterDevice - Contr√¥leur ma√Ætre
     */
    syncWith(masterDevice) {
        this.ambiance = { ...masterDevice.ambiance };
        this.activate();
        console.log(`${this.deviceName} synchronis√© avec ${masterDevice.deviceName}.`);
    }

    /**
     * Cr√©e une transition douce entre deux th√®mes
     * @param {string} targetTheme - Th√®me cible
     * @param {number} duration - Dur√©e en ms
     * @returns {Object} R√©sultat
     */
    async transitionTo(targetTheme, duration = 5000) {
        const startTheme = this.ambiance.theme;
        
        return {
            success: true,
            message: `üåà Transition de ${this.themes[startTheme].emoji} vers ${this.themes[targetTheme].emoji} en ${duration/1000}s`,
            from: startTheme,
            to: targetTheme,
            duration: duration
        };
    }
}

module.exports = AmbianceController;
