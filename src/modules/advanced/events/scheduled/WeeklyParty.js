const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

/**
 * WeeklyParty - Soir√©e hebdomadaire du vendredi soir
 */
class WeeklyParty {
    constructor(client) {
        this.client = client;
        this.participants = new Set();
        this.activities = [
            { name: 'Danse Sensuelle', emoji: 'üíÉ', xp: 100 },
            { name: 'Karaok√© Coquin', emoji: 'üé§', xp: 150 },
            { name: 'Jeux de S√©duction', emoji: 'üòò', xp: 200 },
            { name: 'Concours de Strip', emoji: 'üëó', xp: 300 }
        ];
        this.isActive = false;
    }

    /**
     * D√©marre la soir√©e
     * @param {TextChannel} channel - Le channel o√π annoncer la soir√©e
     */
    async start(channel) {
        this.isActive = true;
        this.participants.clear();

        const embed = new EmbedBuilder()
            .setColor(0xFF1493)
            .setTitle('üéâ SOIR√âE √âROTIQUE DU VENDREDI ! üéâ')
            .setDescription(
                '**La soir√©e la plus chaude de la semaine commence !**\n\n' +
                'üî• Ambiance torride garantie\n' +
                'üíã Rencontres sensuelles\n' +
                'üçæ Champagne √† volont√©\n' +
                'üéµ Musique enivrante\n\n' +
                '**Bonus actifs :**\n' +
                '‚Ä¢ XP x1.5\n' +
                '‚Ä¢ KissCoins x1.5\n' +
                '‚Ä¢ Drops exclusifs !'
            )
            .addFields(
                { name: 'üìç Lieu', value: 'Casino √ârotique - Salle VIP', inline: true },
                { name: '‚è∞ Dur√©e', value: '2 heures', inline: true },
                { name: 'üë• Participants', value: '0', inline: true }
            )
            .setImage('https://example.com/party-banner.gif') // Remplacer par une vraie image
            .setTimestamp()
            .setFooter({ text: 'Cliquez sur Participer pour rejoindre !' });

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('join_party')
                    .setLabel('Participer')
                    .setEmoji('üéâ')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('party_activities')
                    .setLabel('Activit√©s')
                    .setEmoji('üé≠')
                    .setStyle(ButtonStyle.Primary)
            );

        const message = await channel.send({ embeds: [embed], components: [row] });
        
        // Collecter les interactions
        const collector = message.createMessageComponentCollector({ time: 7200000 }); // 2 heures

        collector.on('collect', async (interaction) => {
            if (interaction.customId === 'join_party') {
                await this.handleJoin(interaction);
            } else if (interaction.customId === 'party_activities') {
                await this.showActivities(interaction);
            }
        });

        collector.on('end', () => {
            this.end(channel);
        });

        // √âv√©nements al√©atoires toutes les 10 minutes
        this.eventInterval = setInterval(() => {
            this.triggerRandomEvent(channel);
        }, 600000);
    }

    /**
     * G√®re la participation d'un membre
     * @param {ButtonInteraction} interaction - L'interaction du bouton
     */
    async handleJoin(interaction) {
        const userId = interaction.user.id;
        
        if (this.participants.has(userId)) {
            await interaction.reply({ 
                content: '‚ùå Vous participez d√©j√† √† la soir√©e !', 
                ephemeral: true 
            });
            return;
        }

        this.participants.add(userId);

        const welcomeMessages = [
            `üî• ${interaction.user} entre dans la soir√©e avec style !`,
            `üíã Bienvenue ${interaction.user} ! L'ambiance monte d'un cran !`,
            `üéâ ${interaction.user} rejoint la f√™te ! Que la soir√©e commence !`,
            `üòò ${interaction.user} arrive... Les regards se tournent !`
        ];

        await interaction.reply({
            content: welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)]
        });

        // Mettre √† jour le compteur
        const embed = interaction.message.embeds[0];
        const updatedEmbed = EmbedBuilder.from(embed)
            .spliceFields(2, 1, { 
                name: 'üë• Participants', 
                value: this.participants.size.toString(), 
                inline: true 
            });

        await interaction.message.edit({ embeds: [updatedEmbed] });

        // R√©compense de participation
        // TODO: Ajouter XP et coins au profil
    }

    /**
     * Affiche les activit√©s disponibles
     * @param {ButtonInteraction} interaction - L'interaction du bouton
     */
    async showActivities(interaction) {
        if (!this.participants.has(interaction.user.id)) {
            await interaction.reply({ 
                content: '‚ùå Vous devez d\'abord participer √† la soir√©e !', 
                ephemeral: true 
            });
            return;
        }

        const activityButtons = this.activities.map((activity, index) => 
            new ButtonBuilder()
                .setCustomId(`activity_${index}`)
                .setLabel(activity.name)
                .setEmoji(activity.emoji)
                .setStyle(ButtonStyle.Secondary)
        );

        const rows = [];
        for (let i = 0; i < activityButtons.length; i += 5) {
            rows.push(new ActionRowBuilder().addComponents(activityButtons.slice(i, i + 5)));
        }

        const embed = new EmbedBuilder()
            .setColor(0xFF69B4)
            .setTitle('üé≠ Activit√©s de la Soir√©e')
            .setDescription('Choisissez une activit√© pour gagner de l\'XP bonus !')
            .addFields(
                this.activities.map(a => ({
                    name: `${a.emoji} ${a.name}`,
                    value: `+${a.xp} XP`,
                    inline: true
                }))
            );

        await interaction.reply({ 
            embeds: [embed], 
            components: rows, 
            ephemeral: true 
        });
    }

    /**
     * D√©clenche un √©v√©nement al√©atoire
     * @param {TextChannel} channel - Le channel de la soir√©e
     */
    async triggerRandomEvent(channel) {
        const events = [
            {
                title: 'üíÉ DANCE BATTLE !',
                description: 'Un battle de danse sensuelle commence ! Les meilleurs danseurs gagnent 500 XP !',
                emoji: 'üíÉ'
            },
            {
                title: 'üçæ CHAMPAGNE SHOWER !',
                description: 'Une pluie de champagne ! Tous les participants re√ßoivent 100 üíã !',
                emoji: 'üçæ'
            },
            {
                title: 'üòò KISSING CONTEST !',
                description: 'Concours de baisers ! Votez pour le couple le plus passionn√© !',
                emoji: 'üòò'
            },
            {
                title: 'üé≠ MASQUERADE TIME !',
                description: 'Distribution de masques myst√©rieux ! Qui se cache derri√®re ?',
                emoji: 'üé≠'
            }
        ];

        const event = events[Math.floor(Math.random() * events.length)];

        const embed = new EmbedBuilder()
            .setColor(0xFFD700)
            .setTitle(`${event.emoji} ${event.title}`)
            .setDescription(event.description)
            .setTimestamp();

        await channel.send({ embeds: [embed] });

        // Distribuer les r√©compenses aux participants
        // TODO: Impl√©menter la distribution des r√©compenses
    }

    /**
     * Termine la soir√©e
     * @param {TextChannel} channel - Le channel de la soir√©e
     */
    async end(channel) {
        this.isActive = false;
        clearInterval(this.eventInterval);

        const topParticipants = Array.from(this.participants).slice(0, 3);

        const embed = new EmbedBuilder()
            .setColor(0x800080)
            .setTitle('üåô Fin de la Soir√©e √ârotique')
            .setDescription(
                'La soir√©e touche √† sa fin... Mais les souvenirs restent ! üí´\n\n' +
                `**Total de participants :** ${this.participants.size}\n\n` +
                '**Jusqu\'√† la prochaine fois !** üòò'
            )
            .addFields({
                name: 'üèÜ Meilleurs F√™tards',
                value: topParticipants.length > 0 
                    ? topParticipants.map((id, i) => `${i + 1}. <@${id}>`).join('\n')
                    : 'Aucun participant'
            })
            .setTimestamp();

        await channel.send({ embeds: [embed] });

        // Bonus final pour tous les participants
        // TODO: Distribuer les r√©compenses finales
    }

    /**
     * V√©rifie si la soir√©e est active
     * @returns {boolean} √âtat de la soir√©e
     */
    isPartyActive() {
        return this.isActive;
    }

    /**
     * Obtient le nombre de participants
     * @returns {number} Nombre de participants
     */
    getParticipantCount() {
        return this.participants.size;
    }
}

module.exports = WeeklyParty;
