const { Sequelize } = require('sequelize');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../../../.env') });

// Configuration de la base de donn√©es
const sequelize = new Sequelize(process.env.DATABASE_URL, {
  logging: false,
  dialectOptions: {
    ssl: process.env.NODE_ENV === 'production' ? {
      require: true,
      rejectUnauthorized: false
    } : false
  }
});

// Import du mod√®le Role
const Role = require('../models/Role')(sequelize, Sequelize.DataTypes);

// Import du seed
const rolesSeed = require('./roles');

async function runSeed() {
  try {
    console.log('üîÑ Connexion √† la base de donn√©es...');
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √©tablie');

    console.log('üå± Ex√©cution du seed des r√¥les...');
    
    // Supprimer tous les r√¥les existants pour avoir des donn√©es propres
    console.log('üßπ Suppression des r√¥les existants...');
    await Role.destroy({ where: {} });
    
    // Cr√©er un objet queryInterface minimal
    const queryInterface = {
      bulkInsert: async (tableName, records, options) => {
        // Pas besoin de convertir car Sequelize g√®re automatiquement avec underscored: true
        await Role.bulkCreate(records, {
          updateOnDuplicate: options ? options.updateOnDuplicate : undefined
        });
      },
      bulkDelete: async (tableName, where) => {
        await Role.destroy({ where: where || {} });
      }
    };

    // Ex√©cuter le seed
    await rolesSeed.up(queryInterface, Sequelize);
    
    console.log('‚úÖ Seed des r√¥les ex√©cut√© avec succ√®s !');
    
    // Afficher les r√¥les cr√©√©s
    const roles = await Role.findAll({
      attributes: ['name', 'emoji', 'color', 'nsfw_level']
    });
    
    console.log('\nüìã R√¥les cr√©√©s :');
    roles.forEach(role => {
      console.log(`  ${role.emoji} ${role.name} - Niveau NSFW: ${role.nsfw_level} - Couleur: ${role.color}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution du seed :', error);
    process.exit(1);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter le seed
runSeed();
