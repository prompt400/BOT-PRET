/**
 * Tests pour le service Keep-Alive
 * V√©rifie la conformit√© avec les bonnes pratiques Discord.js
 */

import keepAliveService from '../src/services/keepalive.js';

console.log('üß™ Test du service Keep-Alive');
console.log('================================\n');

// Test 1: V√©rifier les intervalles
console.log('‚úì Test 1: V√©rification des intervalles');
console.log(`  - Intervalle keep-alive: ${keepAliveService.keepAliveInterval / 1000}s (recommand√©: 600s)`);
console.log(`  - Seuil d'inactivit√©: ${keepAliveService.inactivityThreshold / 1000}s (recommand√©: 3600s)`);

if (keepAliveService.keepAliveInterval === 600000) {
    console.log('  ‚úÖ Intervalle keep-alive conforme (10 minutes)');
} else {
    console.log('  ‚ùå Intervalle keep-alive non conforme');
}

if (keepAliveService.inactivityThreshold === 3600000) {
    console.log('  ‚úÖ Seuil d\'inactivit√© conforme (1 heure)');
} else {
    console.log('  ‚ùå Seuil d\'inactivit√© non conforme');
}

// Test 2: V√©rifier qu'il n'y a pas de double d√©marrage
console.log('\n‚úì Test 2: Pr√©vention du double d√©marrage');
const mockClient = {
    isReady: () => true,
    ws: { ping: 50, status: 0 },
    guilds: { cache: { size: 5 } },
    on: () => {} // Mock event listener
};

// Premier d√©marrage
keepAliveService.start(mockClient);
console.log('  - Premier d√©marrage effectu√©');

// Tentative de double d√©marrage
const originalWarn = console.warn;
let warningDetected = false;
console.warn = (msg) => {
    if (msg.includes('d√©j√† d√©marr√©')) {
        warningDetected = true;
    }
};

keepAliveService.start(mockClient);
console.warn = originalWarn;

if (warningDetected) {
    console.log('  ‚úÖ Protection contre le double d√©marrage fonctionne');
} else {
    console.log('  ‚ùå Pas de protection contre le double d√©marrage');
}

// Test 3: Arr√™t du service
console.log('\n‚úì Test 3: Arr√™t du service');
keepAliveService.stop();
console.log('  ‚úÖ Service arr√™t√© correctement');

// Test 4: V√©rification des m√©thodes
console.log('\n‚úì Test 4: V√©rification des m√©thodes');
const methods = ['start', 'stop', 'performKeepAlive', 'checkInactivity', 'setupActivityTracking', 'resetInactivity'];
let allMethodsPresent = true;

methods.forEach(method => {
    if (typeof keepAliveService[method] === 'function') {
        console.log(`  ‚úÖ M√©thode ${method} pr√©sente`);
    } else {
        console.log(`  ‚ùå M√©thode ${method} manquante`);
        allMethodsPresent = false;
    }
});

// R√©sum√©
console.log('\n================================');
console.log('üìä R√©sum√© des tests:');
console.log('  - Intervalles conformes: ' + (keepAliveService.keepAliveInterval === 600000 && keepAliveService.inactivityThreshold === 3600000 ? '‚úÖ' : '‚ùå'));
console.log('  - Protection double d√©marrage: ' + (warningDetected ? '‚úÖ' : '‚ùå'));
console.log('  - Toutes les m√©thodes pr√©sentes: ' + (allMethodsPresent ? '‚úÖ' : '‚ùå'));
console.log('\nüí° Recommandations Discord.js:');
console.log('  - Ne pas impl√©menter de heartbeat manuel (Discord.js le g√®re)');
console.log('  - Utiliser des intervalles de 10+ minutes pour les keep-alive');
console.log('  - Tracker l\'activit√© r√©elle des utilisateurs, pas juste le ping');
console.log('  - Ne pas marquer le bot comme unhealthy trop rapidement');
