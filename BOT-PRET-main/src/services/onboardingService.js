/**
 * Service de gestion de l'onboarding
 * G√®re l'accueil et l'orientation des nouveaux membres
 */

import { MessageEmbed, MessageActionRow, MessageSelectMenu, MessageButton } from 'discord.js';
import { onboardingConfig, roleMapping, tourSteps } from '../config/onboarding.js';
import Logger from './logger.js';
import GestionnaireBadges from './gestionnaireBadges.js';

const logger = new Logger('OnboardingService');

class OnboardingService {
    constructor(client) {
        this.client = client;
        this.activeTours = new Map(); // Stocke les tours actifs par utilisateur
        this.gestionnaireBadges = new GestionnaireBadges();
    }

    /**
     * D√©marre le processus d'onboarding pour un nouveau membre
     * @param {import('discord.js').GuildMember} member 
     */
    async demarrerOnboarding(member) {
        try {
            logger.info(`D√©marrage de l'onboarding pour ${member.user.tag}`);
            
            // Cr√©er l'embed de bienvenue
            const embedBienvenue = this.creerEmbedBienvenue(member);
            
            // Cr√©er le menu de s√©lection des r√¥les
            const menuRoles = this.creerMenuRoles();
            
            // Cr√©er les boutons d'action
            const boutonsAction = this.creerBoutonsAction();
            
            // Trouver le salon de bienvenue
            const salonBienvenue = member.guild.systemChannel || 
                member.guild.channels.cache.find(ch => ch.name === 'bienvenue' || ch.name === 'welcome');
            
            if (salonBienvenue) {
                // Envoyer le message de bienvenue
                const messageBienvenue = await salonBienvenue.send({
                    content: `${member}`,
                    embeds: [embedBienvenue],
                    components: [boutonsAction, menuRoles]
                });
                
                // D√©marrer le timer de rappel
                this.programmerRappel(member, messageBienvenue);
                
                // Attribuer automatiquement le r√¥le "Nouveau" apr√®s un d√©lai
                setTimeout(async () => {
                    await this.attribuerRoleNouveau(member);
                }, onboardingConfig.settings.autoRoleDelay);
            }
            
            // Envoyer un guide priv√©
            await this.envoyerGuidePriv√©(member);
            
        } catch (erreur) {
            logger.erreur('Erreur lors du d√©marrage de l\'onboarding', erreur);
        }
    }

    /**
     * Cr√©e l'embed de bienvenue personnalis√©
     * @param {import('discord.js').GuildMember} member 
     */
    creerEmbedBienvenue(member) {
        const config = onboardingConfig.welcomeChannel.embed;
        const embed = new MessageEmbed()
            .setTitle(config.title)
            .setDescription(config.description)
            .setColor(config.color)
            .setThumbnail(member.user.displayAvatarURL({ dynamic: true }));
        
        // Ajouter les champs
        config.fields.forEach(field => {
            embed.addField(field.name, field.value, field.inline);
        });
        
        embed.setFooter({
            text: config.footer.text,
            iconURL: config.footer.icon_url
        });
        
        embed.setTimestamp();
        
        return embed;
    }

    /**
     * Cr√©e le menu de s√©lection des r√¥les
     */
    creerMenuRoles() {
        const config = onboardingConfig.roleMenu;
        const selectMenu = new MessageSelectMenu()
            .setCustomId('select_onboarding_roles')
            .setPlaceholder(config.placeholder)
            .setMinValues(config.minValues)
            .setMaxValues(config.maxValues);
        
        // Ajouter les options
        config.options.forEach(option => {
            selectMenu.addOptions({
                label: option.label,
                description: option.description,
                value: option.value,
                emoji: option.emoji
            });
        });
        
        return new MessageActionRow().addComponents(selectMenu);
    }

    /**
     * Cr√©e les boutons d'action
     */
    creerBoutonsAction() {
        const buttons = onboardingConfig.buttons;
        
        return new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setCustomId(buttons.startTour.customId)
                    .setLabel(buttons.startTour.label)
                    .setStyle(buttons.startTour.style),
                new MessageButton()
                    .setCustomId(buttons.skipTour.customId)
                    .setLabel(buttons.skipTour.label)
                    .setStyle(buttons.skipTour.style),
                new MessageButton()
                    .setCustomId(buttons.needHelp.customId)
                    .setLabel(buttons.needHelp.label)
                    .setStyle(buttons.needHelp.style)
            );
    }

    /**
     * G√®re les interactions de l'onboarding
     * @param {import('discord.js').Interaction} interaction 
     */
    async gererInteraction(interaction) {
        try {
            // Gestion du menu de s√©lection des r√¥les
            if (interaction.customId === 'select_onboarding_roles') {
                await this.gererSelectionRoles(interaction);
            }
            // Gestion du bouton de d√©marrage du tour
            else if (interaction.customId === 'start_onboarding_tour') {
                await this.demarrerTourGuide(interaction);
            }
            // Gestion du bouton skip
            else if (interaction.customId === 'skip_onboarding_tour') {
                await this.terminerOnboarding(interaction.member);
                await interaction.reply({
                    content: onboardingConfig.contextualMessages.allStepsCompleted,
                    ephemeral: true
                });
            }
            // Gestion du bouton d'aide
            else if (interaction.customId === 'onboarding_help') {
                await this.afficherAide(interaction);
            }
        } catch (erreur) {
            logger.erreur('Erreur lors de la gestion de l\'interaction onboarding', erreur);
        }
    }

    /**
     * G√®re la s√©lection des r√¥les
     * @param {import('discord.js').StringSelectMenuInteraction} interaction 
     */
    async gererSelectionRoles(interaction) {
        const rolesSelectionnes = interaction.values;
        const member = interaction.member;
        const rolesAttribues = [];
        const salonsDebloques = [];
        
        for (const roleValue of rolesSelectionnes) {
            const roleId = roleMapping[roleValue];
            if (roleId) {
                const role = interaction.guild.roles.cache.get(roleId);
                if (role) {
                    await member.roles.add(role);
                    rolesAttribues.push(role.name);
                    
                    // Envoyer le guide sp√©cifique au r√¥le
                    const guide = onboardingConfig.roleGuides[roleValue];
                    if (guide) {
                        await this.envoyerGuideRole(member, guide);
                    }
                }
            }
        }
        
        // R√©pondre avec un message de confirmation
        let message = `‚úÖ R√¥les attribu√©s : **${rolesAttribues.join(', ')}**\n`;
        
        // Si c'est le premier r√¥le
        if (member.roles.cache.size === 2) { // @everyone + nouveau r√¥le
            message = onboardingConfig.contextualMessages.firstRole + '\n' + message;
            
            // Attribuer le badge "Premier pas"
            await this.gestionnaireBadges.attribuerBadge(member.id, 'premier_pas');
        }
        
        await interaction.reply({
            content: message,
            ephemeral: true
        });
    }

    /**
     * D√©marre le tour guid√© interactif
     * @param {import('discord.js').ButtonInteraction} interaction 
     */
    async demarrerTourGuide(interaction) {
        const member = interaction.member;
        
        // V√©rifier si un tour est d√©j√† actif
        if (this.activeTours.has(member.id)) {
            await interaction.reply({
                content: '‚ö†Ô∏è Un tour guid√© est d√©j√† en cours !',
                ephemeral: true
            });
            return;
        }
        
        // D√©marrer le tour
        this.activeTours.set(member.id, {
            etape: 0,
            canal: interaction.channel,
            termine: false
        });
        
        await interaction.reply({
            content: 'üöÄ D√©marrage du tour guid√©...',
            ephemeral: true
        });
        
        // Lancer la premi√®re √©tape
        await this.afficherEtapeTour(member, 0);
    }

    /**
     * Affiche une √©tape du tour guid√©
     * @param {import('discord.js').GuildMember} member 
     * @param {number} etape 
     */
    async afficherEtapeTour(member, etape) {
        const tourData = this.activeTours.get(member.id);
        if (!tourData || tourData.termine) return;
        
        if (etape >= tourSteps.length) {
            // Tour termin√©
            await this.terminerTour(member);
            return;
        }
        
        const etapeActuelle = tourSteps[etape];
        const embed = new MessageEmbed()
            .setTitle(etapeActuelle.title)
            .setDescription(etapeActuelle.content)
            .setColor('#00FF00')
            .setFooter({
                text: `√âtape ${etape + 1}/${tourSteps.length}`
            });
        
        await tourData.canal.send({
            content: `${member}`,
            embeds: [embed]
        });
        
        // Programmer l'√©tape suivante
        setTimeout(() => {
            this.afficherEtapeTour(member, etape + 1);
        }, etapeActuelle.duration);
    }

    /**
     * Termine le tour guid√©
     * @param {import('discord.js').GuildMember} member 
     */
    async terminerTour(member) {
        const tourData = this.activeTours.get(member.id);
        if (!tourData) return;
        
        tourData.termine = true;
        this.activeTours.delete(member.id);
        
        // Attribuer le badge "Tour complet"
        await this.gestionnaireBadges.attribuerBadge(member.id, 'tour_complet');
        
        const embed = new MessageEmbed()
            .setTitle('üéâ Tour guid√© termin√© !')
            .setDescription(onboardingConfig.contextualMessages.allStepsCompleted)
            .setColor('#FFD700')
            .addField('üèÖ Badge d√©bloqu√©', 'Tour complet')
            .setTimestamp();
        
        await tourData.canal.send({
            content: `${member}`,
            embeds: [embed]
        });
    }

    /**
     * Envoie un guide priv√© au nouveau membre
     * @param {import('discord.js').GuildMember} member 
     */
    async envoyerGuidePriv√©(member) {
        try {
            const embed = new MessageEmbed()
                .setTitle('üìñ Guide personnel')
                .setDescription('Voici votre guide personnel pour bien d√©marrer !')
                .setColor('#0099FF')
                .addField('üí° Conseils', 
                    '‚Ä¢ Prenez le temps de lire les r√®gles\n' +
                    '‚Ä¢ Choisissez des r√¥les qui vous correspondent\n' +
                    '‚Ä¢ N\'h√©sitez pas √† poser des questions'
                )
                .addField('üéØ Objectifs', 
                    '‚Ä¢ Pr√©senter vous pour d√©bloquer votre premier badge\n' +
                    '‚Ä¢ Participez √† une conversation\n' +
                    '‚Ä¢ D√©couvrez les diff√©rents salons'
                )
                .setFooter({
                    text: 'Ce message est priv√© et visible uniquement par vous'
                });
            
            await member.send({ embeds: [embed] });
        } catch (erreur) {
            logger.avertissement(`Impossible d'envoyer le guide priv√© √† ${member.user.tag}`);
        }
    }

    /**
     * Envoie un guide sp√©cifique au r√¥le
     * @param {import('discord.js').GuildMember} member 
     * @param {Object} guide 
     */
    async envoyerGuideRole(member, guide) {
        try {
            const embed = new MessageEmbed()
                .setTitle(guide.title)
                .setDescription(guide.description)
                .setColor('#9B59B6')
                .addField('üí° Conseils', guide.tips.join('\n'))
                .setTimestamp();
            
            await member.send({ embeds: [embed] });
        } catch (erreur) {
            logger.avertissement(`Impossible d'envoyer le guide de r√¥le √† ${member.user.tag}`);
        }
    }

    /**
     * Programme un rappel pour les membres inactifs
     * @param {import('discord.js').GuildMember} member 
     * @param {import('discord.js').Message} message 
     */
    programmerRappel(member, message) {
        setTimeout(async () => {
            // V√©rifier si le membre n'a toujours pas de r√¥le
            if (member.roles.cache.size === 1) { // Seulement @everyone
                await message.reply({
                    content: `${member} üëã N'oubliez pas de choisir vos r√¥les pour acc√©der √† tous les salons !`
                });
            }
        }, onboardingConfig.settings.reminderDelay);
    }

    /**
     * Attribue le r√¥le "Nouveau" automatiquement
     * @param {import('discord.js').GuildMember} member 
     */
    async attribuerRoleNouveau(member) {
        const roleId = roleMapping.role_nouveau;
        if (roleId) {
            const role = member.guild.roles.cache.get(roleId);
            if (role) {
                await member.roles.add(role);
                logger.info(`R√¥le "Nouveau" attribu√© √† ${member.user.tag}`);
            }
        }
    }

    /**
     * Affiche l'aide pour l'onboarding
     * @param {import('discord.js').ButtonInteraction} interaction 
     */
    async afficherAide(interaction) {
        const embed = new MessageEmbed()
            .setTitle('‚ùì Aide - Onboarding')
            .setDescription('Voici comment bien d√©marrer sur notre serveur')
            .setColor('#3498DB')
            .addField('üé≠ Les r√¥les', 
                'Choisissez jusqu\'√† 3 r√¥les qui correspondent √† vos int√©r√™ts. ' +
                'Cela vous donnera acc√®s aux salons sp√©cialis√©s.'
            )
            .addField('üèÖ Les badges', 
                'Gagnez des badges en participant aux activit√©s du serveur. ' +
                'Votre premier badge vous attend dans le salon de pr√©sentation !'
            )
            .addField('üí¨ Communication', 
                'N\'h√©sitez pas √† poser des questions dans le salon g√©n√©ral. ' +
                'Notre communaut√© est l√† pour vous aider !'
            )
            .addField('üöÄ Tour guid√©', 
                'Le tour guid√© vous pr√©sente toutes les fonctionnalit√©s en 2 minutes. ' +
                'C\'est le meilleur moyen de d√©couvrir le serveur !'
            );
        
        await interaction.reply({
            embeds: [embed],
            ephemeral: true
        });
    }

    /**
     * Termine le processus d'onboarding
     * @param {import('discord.js').GuildMember} member 
     */
    async terminerOnboarding(member) {
        logger.info(`Onboarding termin√© pour ${member.user.tag}`);
        
        // Nettoyer les donn√©es temporaires
        this.activeTours.delete(member.id);
        
        // Attribuer le badge de compl√©tion si applicable
        if (member.roles.cache.size > 2) { // Plus que @everyone et Nouveau
            await this.gestionnaireBadges.attribuerBadge(member.id, 'onboarding_complet');
        }
    }
}

export default OnboardingService;
